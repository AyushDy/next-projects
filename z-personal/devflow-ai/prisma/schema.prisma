// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  githubId      String?   @unique
  createdAt     DateTime  @default(now())

  accounts     Account[]
  sessions     Session[]
  repositories Repository[]
}

model Repository {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  fullName     String // owner/repo-name format
  url          String
  owner        String
  description  String?
  language     String?
  stars        Int?
  lastAnalysis DateTime?
  userId       String    @db.ObjectId
  createdAt    DateTime  @default(now())

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses Analysis[]

  @@index([userId, createdAt])
}

model Analysis {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  repositoryId   String   @db.ObjectId
  filePath       String
  language       String?
  findings       Json // Flexible JSON for AI responses
  summary        Json? // Analysis summary stats
  aiModel        String?
  processingTime Int? // milliseconds
  createdAt      DateTime @default(now())

  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@index([repositoryId, createdAt])
}
