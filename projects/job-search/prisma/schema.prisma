// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  username     String
  logo         String?
  email        String        @unique
  password     String
  role         Role
  savedJobs    savedJob[]    @relation("SavedJobs")
  applications Application[]
  ownedCompany Company?      @relation("CompanyOwner")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Review       Review[]
}

model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  location    String
  logo        String?
  jobs        Job[]    @relation("CompanyJobs")
  owner       User     @relation("CompanyOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String   @unique @db.ObjectId
  reviews     Review[]
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  rating    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String   @db.ObjectId
}

model Application {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  status    Status
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId     String   @db.ObjectId
}

model Job {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  employmentType   String
  employerLogo     String
  employerName     String
  isRemote         Boolean
  city             String
  location         String
  benefits         String[]
  minSalary        Int
  maxSalary        Int
  salaryPeriod     String
  qualifications   String[]
  responsibilities String[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  company          Company?      @relation("CompanyJobs", fields: [companyId], references: [id], onDelete: Cascade)
  companyId        String        @db.ObjectId
  savedBy          savedJob[]
  applications     Application[]
}

model savedJob {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation("SavedJobs", fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId     String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, jobId])
}

enum Role {
  admin
  user
}

enum Status {
  accepted
  rejected
  pending
}
